{"version":3,"sources":["features/Robots/robotsSlice.js","features/Robots/Robots.js","features/ChuckNorris/chuckSlice.js","features/ChuckNorris/ChuckNorris.js","features/UrbanDict/urbanSlice.js","features/UrbanDict/Urban.js","App.js","features/Input/inputSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["fetchRobots","createAsyncThunk","thunkAPI","a","fetch","data","json","response","robotsSlice","createSlice","name","initialState","robots","reducers","onRobotUpdate","state","action","payload","extraReducers","builder","addCase","fulfilled","push","Robots","dispatch","useDispatch","useSelector","useEffect","then","unwrapResult","res","catch","err","Error","className","src","random","choice","file","alt","onClick","fetchChuckJoke","chuckSlice","joke","onJokeChange","ChuckNorris","jokeStater","length","icon_url","randint","value","fetchWordMeaning","term","urbanSlice","meaning","Urban","props","useState","word","setWord","placeholder","onChange","event","target","list","definition","thumbs_up","thumbs_down","App","inputSlice","onInputChange","actions","store","configureStore","reducer","input","inputSliceReducer","robotSliceReducer","chuckSliceRedcuer","urbanSliceRedcuer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0c7c349.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const fetchRobots = createAsyncThunk(\r\n    'robots', \r\n    async (thunkAPI) => {\r\n        const data = await fetch(\"https://aws.random.cat/meow?ref=apilist.fun\")\r\n        const response = await data.json()\r\n        return response\r\n    }\r\n)\r\n\r\nconst robotsSlice = createSlice({\r\n    name: \"robots\",\r\n    initialState: {robots: []},\r\n    reducers: {\r\n        onRobotUpdate: (state, action) => {\r\n            state.robots = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchRobots.fulfilled, (state, action) => {\r\n            state.robots.push(action.payload)\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport default robotsSlice.reducer\r\n\r\n","import React, {useEffect} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchRobots } from './robotsSlice';\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport random from 'fast-helpers.js/random'\r\nimport './Robots.css'\r\n\r\nconst Robots = () => {\r\n    const dispatch = useDispatch()\r\n    const robots = useSelector(state => state.robots.robots)\r\n    const onClickGetRobot = () => {\r\n        dispatch(fetchRobots())\r\n          .then(unwrapResult)\r\n          .then((res) => {\r\n              return res;\r\n          })\r\n          .catch((err) => {\r\n              return new Error(err)\r\n          })\r\n    }\r\n    useEffect(() => {\r\n        dispatch(fetchRobots())\r\n          .then(unwrapResult)\r\n          .then((res) => {\r\n              return res;\r\n          })\r\n          .catch((err) => {\r\n              return new Error(err)\r\n          })\r\n    }, [])\r\n\r\n        return (\r\n                    <div className=\"image\">\r\n                    {robots[0] ? <img src={random.choice(robots).file} alt={'cat'}></img> : <h1>Loading</h1>}\r\n                    <button onClick={onClickGetRobot}>Generate</button>\r\n                    </div>\r\n        )\r\n}\r\n\r\nexport default Robots;","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const fetchChuckJoke = createAsyncThunk(\r\n    'joke', \r\n    async () => {\r\n        const data = await fetch('https://api.chucknorris.io/jokes/random')\r\n        return await data.json()\r\n    }\r\n)\r\n\r\nconst chuckSlice = createSlice({\r\n    name: \"joke\",\r\n    initialState: {joke: []},\r\n    reducers: {\r\n        onJokeChange: (state, action) => {\r\n            state.joke = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchChuckJoke.fulfilled, (state, action) => {\r\n            state.joke.push(action.payload)\r\n        })\r\n    }\r\n})\r\n\r\nexport default chuckSlice.reducer","import { unwrapResult } from '@reduxjs/toolkit';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchChuckJoke } from './chuckSlice';\r\nimport random from 'fast-helpers.js/random'\r\nimport './ChuckNorris.css'\r\n\r\nconst ChuckNorris = () => {\r\n    const dispatch = useDispatch()\r\n    const joke = useSelector(state => state.joke.joke) \r\n    const jokeStater = () => {\r\n        dispatch(fetchChuckJoke())\r\n        .then(unwrapResult)\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((err) => {\r\n            return new Error(err)\r\n        })\r\n    }\r\n\r\n    useEffect(()=> {\r\n        jokeStater()\r\n    },[])\r\n    return (\r\n        <div className=\"joke-container\">\r\n                { joke.length ? <img alt=\"\" src={joke[0].icon_url}/> : <h1>Loading</h1>}\r\n                {joke.length ? <p>Joke {joke[random.randint(joke.length)].value}</p> : <p>Loading</p>}\r\n                <button onClick={jokeStater}>Generate</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ChuckNorris","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchWordMeaning = createAsyncThunk('meaning', async (term) => {\r\n    const data = await fetch(`https://mashape-community-urban-dictionary.p.rapidapi.com/define?term=${term}`, {\r\n\t\"method\": \"GET\",\r\n\t\"headers\": {\r\n\t\t\"x-rapidapi-host\": \"mashape-community-urban-dictionary.p.rapidapi.com\",\r\n\t\t\"x-rapidapi-key\": \"a044aad677msh7d8af96e2adc9f6p1c5b18jsn50254a432290\"\r\n\t} \r\n    })\r\n\r\n    const response = data.json()\r\n    return response;\r\n})\r\n\r\nconst urbanSlice = createSlice({\r\n    name: \"meaning\",\r\n    initialState: {meaning: []},\r\n    reducers: {\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchWordMeaning.fulfilled, (state, action) =>{\r\n            state.meaning.push(action.payload)\r\n        })\r\n    }\r\n})\r\n\r\nexport default urbanSlice.reducer","import { fetchWordMeaning } from \"./urbanSlice\";\r\nimport React, {useState} from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { unwrapResult } from \"@reduxjs/toolkit\";\r\nimport './Urban.css'\r\n\r\nconst Urban = (props) => {\r\n    const [word, setWord] = useState('')\r\n    const dispatch = useDispatch()\r\n    const meaning = useSelector(state => state.meaning.meaning)\r\n    const getMyMeaning = () => {\r\n        dispatch(fetchWordMeaning(word))\r\n        .then(unwrapResult)\r\n        .then(data => {\r\n            return data\r\n        })\r\n    }\r\n\r\n    return  (\r\n        <div className=\"urban\">\r\n            <input placeholder=\"Enter a Word\" onChange={(event) => setWord(event.target.value)}/>\r\n            <div>\r\n                <h3>Word</h3>\r\n                {meaning[0] ? <p className=\"center\"> {meaning[meaning.length - 1].list[0].word}</p> : \"None\"}\r\n                <h3>Meaning</h3>\r\n                {meaning[0] ? <p>{meaning[meaning.length - 1].list[0].definition} | 👍 \r\n                {meaning[meaning.length - 1].list[0].thumbs_up} | 👎 \r\n                {meaning[meaning.length - 1].list[0].thumbs_down}</p> : \r\n                <p>None</p>}\r\n                {meaning[0] ? <p>{meaning[meaning.length - 1].list[1].definition} | 👍 \r\n                {meaning[meaning.length - 1].list[1].thumbs_up} | 👎 \r\n                {meaning[meaning.length - 1].list[1].thumbs_down}</p> :\r\n                 <p>None</p>}\r\n                {meaning[0] ? <p>{meaning[meaning.length - 1].list[2].definition} | 👍 \r\n                {meaning[meaning.length - 1].list[2].thumbs_up} | 👎 \r\n                {meaning[meaning.length - 1].list[2].thumbs_down}</p> : \r\n                <p>None</p>}\r\n            </div>\r\n            <button onClick={getMyMeaning}>Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Urban","import React from 'react';\nimport './App.css';\nimport Robots from './features/Robots/Robots';\nimport ChuckNorris from './features/ChuckNorris/ChuckNorris';\nimport Urban from './features/UrbanDict/Urban';\nfunction App(props) {\n  return (\n    <div>\n      <h1 className=\"center\">Wonders of Web</h1>\n      <div className=\"grid\">\n      <ChuckNorris className=\"grid-item\"/>\n      <Robots className=\"grid-item\"/>\n      <Urban className=\"grid-item\"/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createSlice } from \"@reduxjs/toolkit\"\r\nconst initailState = {\r\n    name: \"\"\r\n}\r\n\r\nconst inputSlice = createSlice({\r\n    name: \"input\",\r\n    initialState: initailState,\r\n    reducers: {\r\n        onInputChange: (state, action) => {\r\n            state.name = action.payload\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport const { onInputChange }  = inputSlice.actions\r\nexport default inputSlice.reducer\r\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport inputSliceReducer from \"../features/Input/inputSlice\";\nimport robotSliceReducer from '../features/Robots/robotsSlice'\nimport chuckSliceRedcuer from \"../features/ChuckNorris/chuckSlice\";\nimport urbanSliceRedcuer from \"../features/UrbanDict/urbanSlice\";\nexport const store = configureStore({\n  reducer: {input: inputSliceReducer, robots: robotSliceReducer, joke: chuckSliceRedcuer, meaning: urbanSliceRedcuer}\n\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}